variables:
  remotehost1: 'daint.alps.cscs.ch'
  conda_init: "source /users/{cscsuser}/miniconda3/bin/activate"
  config_files: "/home/jovyan/opt/aiidalab-alps-files/"
  qe_uenv: "quantumespresso/v7.4:v2"
  qe_version: "7.4"
  cp2k_version: "9.4"
  spm_version: "1.5.0"
  cp2k_uenv: "cp2k/2025.1:v1"
  stm_uenv: "cp2k-spm-tools/1.5.0:1658742098"
  python_version: "3.9.13"
  ssh_public_key: "/home/jovyan/.ssh/cscs-key-cert.pub"
  # bashrc to enable conda
  bashrc: |
    # Sample .bashrc for SuSE Linux now
    # Copyright (c) SuSE GmbH Nuernberg

    # There are 3 different types of shells in bash: the login shell, normal shell
    # and interactive shell. Login shells read ~/.profile and interactive shells
    # read ~/.bashrc; in our setup, /etc/profile sources ~/.bashrc - thus all
    # settings made here will also take effect in a login shell.
    #
    # NOTE: It is recommended to make language settings in ~/.profile rather than
    # here, since multilingual X sessions would not work properly if LANG is over-
    # ridden in every subshell.

    # Some applications read the EDITOR variable to determine your favourite text
    # editor. So uncomment the line below and enter the editor of your choice :-)
    #export EDITOR=/usr/bin/vim
    #export EDITOR=/usr/bin/mcedit

    # For some news readers it makes sense to specify the NEWSSERVER variable here
    #export NEWSSERVER=your.news.server

    # If you want to use a Palm device with Linux, uncomment the two lines below.
    # For some (older) Palm Pilots, you might need to set a lower baud rate
    # e.g. 57600 or 38400; lowest is 9600 (very slow!)
    #
    #export PILOTPORT=/dev/pilot
    #export PILOTRATE=115200

    test -s ~/.alias && . ~/.alias || true

    # >>> conda initialize >>>
    # !! Contents within this block are managed by conda init !!
    __conda_setup=""
    if [ 126 -eq 0 ]; then
        eval ""
    else
        if [ -f /users/{cscsuser}/miniconda3/etc/profile.d/conda.sh ]; then
            . /users/{cscsuser}/miniconda3/etc/profile.d/conda.sh
        else
            export PATH=/users/{cscsuser}/miniconda3/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/jovyan/.local/bin
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<

widgets:
  cscsuser:
    - "select"
    - "ajayaraj"
    - "akinikar"
    - "cpi"
    - "ddutta"
    - "eammerma"
    - "fdacosta"
    - "jhwang"
    - "joverarr"
    - "lbobzien"
    - "ldominik"
    - "lhuberic"
    - "llieske"
    - "lxuanche"
    - "mdigiova"
    - "mfinger"
    - "nbassi"
    - "nkrane"
    - "ramador"
    - "wgao"
    - "yaa"
  grant:
    - "select"
    - "lp83"
    - "lp86"
  
computers:
  daint.alps:
    setup:
      description: daint.alps at CSCS
      hostname: daint.alps.cscs.ch
      label: daint.alps_{grant}
      mpiprocs_per_machine: 256
      mpirun_command: srun --cpu-bind=socket /users/{cscsuser}/bin/mps-wrapper.sh
      prepend_text: |
        #SBATCH --ntasks-per-core=1
        #SBATCH --hint=nomultithread
        #SBATCH --no-requeue
        #SBATCH --account={grant}
      scheduler: core.slurm
      shebang: "#!/bin/bash -l"
      transport: core.ssh
      use_double_quotes: false
      work_dir: "/capstor/scratch/cscs/{username}/aiida/"
      default_memory_per_machine: 268435456
    config:
      allow_agent: true
      compress: true
      gss_auth: false
      gss_deleg_creds: false
      gss_host: daint.alps.cscs.ch
      gss_kex: false
      key_filename: /home/jovyan/.ssh/cscs-key
      key_policy: RejectPolicy
      load_system_host_keys: true
      look_for_keys: true
      port: 22
      proxy_command: ''
      proxy_jump: ela.cscs.ch
      safe_interval: 30.0
      timeout: 60
      use_login_shell: true
      username: "{cscsuser}"

# SSH Configuration from 'config' File
ssh_config: 
  daint.alps.cscs.ch:
    hostname: daint.alps.cscs.ch
    user: "{cscsuser}"
    port: 22
    proxy_jump: ela.cscs.ch
    identity_file: /home/jovyan/.ssh/cscs-key
    server_alive_interval: 5
  ela.cscs.ch:
    hostname: ela.cscs.ch
    user: "{cscsuser}"
    port: 22
    identity_file: /home/jovyan/.ssh/cscs-key

      

# Computational Tools
codes:
  stm:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: nanotech_empa.stm
    description: "stm {stm_uenv} on daint.alps from https://github.com/nanotech-empa/cp2k-spm-tools.git"
    filepath_executable: "/user-environment/env/default/bin/cp2k-stm-sts-wfn"
    label: stm-{spm_version}
    prepend_text: |
      #SBATCH --uenv={stm_uenv}
      #SBATCH --view=default
      # set environment
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export MPICH_GPU_SUPPORT_ENABLED=0
      ulimit -s unlimited
    use_double_quotes: false
  
  python:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: pythonjob.pythonjob
    description: "python at daint alps"
    filepath_executable: "/users/{cscsuser}/miniconda3/envs/py39/bin/python"
    label: python-py39
    prepend_text: |
      conda activate py39
      export MPICH_GPU_SUPPORT_ENABLED=0
    use_double_quotes: false

  pw:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: quantumespresso.pw
    description: "pw.x {qe_uenv}"
    filepath_executable: "/user-environment/env/default/bin/pw.x"
    label: pw-{qe_version}
    prepend_text: |
      #SBATCH --uenv={qe_uenv}
      # set environment
      export MPICH_GPU_SUPPORT_ENABLED=1
      export MPICH_SMP_SINGLE_COPY_MODE=xpmem
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export OMP_PLACES=threads
      ulimit -s unlimited
    use_double_quotes: false

  pp:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: quantumespresso.pp
    description: "pp.x {qe_uenv}"
    filepath_executable: "/user-environment/env/default/bin/pp.x"
    label: pp-{qe_version}
    prepend_text: |
      #SBATCH --uenv={qe_uenv}
      # set environment
      export MPICH_GPU_SUPPORT_ENABLED=1
      export MPICH_SMP_SINGLE_COPY_MODE=xpmem
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export OMP_PLACES=threads
      ulimit -s unlimited
    use_double_quotes: false

  projwfc:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: quantumespresso.projwfc
    description: "projwfc.x {qe_uenv}"
    filepath_executable: "/user-environment/env/default/bin/projwfc.x"
    label: projwfc-{qe_version}
    prepend_text: |
      #SBATCH --uenv={qe_uenv}
      # set environment
      export MPICH_GPU_SUPPORT_ENABLED=1
      export MPICH_SMP_SINGLE_COPY_MODE=xpmem
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export OMP_PLACES=threads
      ulimit -s unlimited
    use_double_quotes: false

  dos:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: quantumespresso.dos
    description: "dos.x {qe_uenv}"
    filepath_executable: "/user-environment/env/default/bin/dos.x"
    label: dos-{qe_version}
    prepend_text: |
      #SBATCH --uenv={qe_uenv}
      # set environment
      export MPICH_GPU_SUPPORT_ENABLED=1
      export MPICH_SMP_SINGLE_COPY_MODE=xpmem
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export OMP_PLACES=threads
      ulimit -s unlimited
    use_double_quotes: false

  phonopy:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: phonopy.phonopy
    description: "phonopy at daint alps"
    filepath_executable: "/users/{cscsuser}/miniconda3/envs/phonopy/bin/phonopy"
    label: phonopy
    prepend_text: |
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export MPICH_GPU_SUPPORT_ENABLED=0
      ulimit -s unlimited
      conda activate phonopy
    use_double_quotes: false

  overlap:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: nanotech_empa.overlap
    description: "overlap {stm_uenv} on daint.alps from https://github.com/nanotech-empa/cp2k-spm-tools.git"
    filepath_executable: "/user-environment/env/default/bin/cp2k-overlap-from-wfns"
    label: overlap-{spm_version}
    prepend_text: |
      #SBATCH --uenv={stm_uenv}
      #SBATCH --view=default
      # set environment
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      export MPICH_GPU_SUPPORT_ENABLED=0
      ulimit -s unlimited
    use_double_quotes: 'False'

  critic2:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: critic2
    description: "critic2 on daint.alps"
    filepath_executable: "/users/{cscsuser}/critic2/build/src/critic2"
    label: critic2
    prepend_text: "export MPICH_GPU_SUPPORT_ENABLED=0"
    use_double_quotes: 'False'

  cp2k:
    append_text: ' '
    computer: daint.alps
    default_calc_job_plugin: cp2k
    description: "cp2k {cp2k_uenv} on daint.alps"
    filepath_executable: "/user-environment/env/cp2k/bin/cp2k.psmp"
    label: cp2k-{cp2k_version}
    prepend_text: |
      #SBATCH --uenv={cp2k_uenv}
      #SBATCH --view=cp2k
      # set environment
      export CP2K_DATA_DIR=/users/{cscsuser}/src/cp2k/data
      export CUDA_CACHE_PATH="/dev/shm/$RANDOM"
      export MPICH_GPU_SUPPORT_ENABLED=1
      export MPICH_MALLOC_FALLBACK=1
      export OMP_NUM_THREADS=$((SLURM_CPUS_PER_TASK - 1))
      ulimit -s unlimited
    use_double_quotes: 'False'


custom_commands:
  local_commands:
    dump_files:
      - type: local
        command: ""
  remote_commands:
    remotehost: "{remotehost1}"
    copy_files:
      - type: ssh
        command: "mkdir -p /users/{cscsuser}/bin && mkdir -p /users/{cscsuser}/src"
      - type: scp
        command: "scp {config_files}/mps-wrapper.sh {remotehost1}:/users/{cscsuser}/bin/"
      - type: scp
        command: "scp -r {config_files}/cp2k {remotehost1}:/users/{cscsuser}/src/"
      - type: ssh
        command: "mv /users/{cscsuser}/.bashrc /users/{cscsuser}/.bashrc.bak || true"
      - type: ssh
        command: |
          cat > /users/{cscsuser}/.bashrc <<EOF
          {bashrc}
          EOF

    setup_py39:
      - type: ssh
        command: "{conda_init} && conda env list | grep -q '^py39 ' || conda create -n py39 -c conda-forge python={python_version} pymatgen cloudpickle scikit-image -y"
      - type: ssh
        command: "{conda_init} && conda activate py39 && conda list | awk '{{print $1}}'"
      - type: ssh
        command: "{conda_init} && conda activate py39 && conda install -n py39 -c conda-forge pymatgen cloudpickle scikit-image -y"

    setup_phonopy:
      - type: ssh
        command: "if [ ! -f Miniconda3-latest-Linux-aarch64.sh ]; then wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh; fi"
      - type: ssh
        command: "if [ ! -d /users/{cscsuser}/miniconda3 ]; then bash Miniconda3-latest-Linux-aarch64.sh -b -p /users/{cscsuser}/miniconda3; fi"
      - type: ssh
        command: "{conda_init} && conda env list | grep -q \"^phonopy \" && echo \"Environment exists\" || conda create -n phonopy -c conda-forge phonopy seekpath"

    setup_critic2:
      - type: ssh
        command: "if [ ! -d 'critic2' ]; then git clone https://github.com/aoterodelaroza/critic2.git; fi"
      - type: ssh
        command: "if [ ! -f /users/{cscsuser}/critic2/build/src/critic2 ]; then cd critic2 && mkdir -p build && cd build && uenv run {qe_uenv} cmake .. && uenv run {qe_uenv} make; fi"
      - type: ssh
        command: "ls /users/{cscsuser}/critic2/build/src/critic2"
